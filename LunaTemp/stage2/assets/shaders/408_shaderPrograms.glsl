["\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec4 in_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec4 _Center;\nuniform \tvec4 _MainTexScaleScrollSpeed;\nuniform \tfloat _OpacityPower;\nuniform \tfloat _OpacityIntensity;\nuniform \tfloat _RadialMask_Value;\nuniform \tfloat _RadialMask_Blur;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec2 u_xlat1;\nvec2 u_xlat2;\nlowp float u_xlat10_2;\nbool u_xlatb2;\nbool u_xlatb3;\nfloat u_xlat4;\nfloat u_xlat6;\nbool u_xlatb6;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.yx + (-_Center.yx);\n    u_xlat4 = max(abs(u_xlat0.y), abs(u_xlat0.x));\n    u_xlat4 = float(1.0) / u_xlat4;\n    u_xlat6 = min(abs(u_xlat0.y), abs(u_xlat0.x));\n    u_xlat4 = u_xlat4 * u_xlat6;\n    u_xlat6 = u_xlat4 * u_xlat4;\n    u_xlat1.x = u_xlat6 * 0.0208350997 + -0.0851330012;\n    u_xlat1.x = u_xlat6 * u_xlat1.x + 0.180141002;\n    u_xlat1.x = u_xlat6 * u_xlat1.x + -0.330299497;\n    u_xlat6 = u_xlat6 * u_xlat1.x + 0.999866009;\n    u_xlat1.x = u_xlat6 * u_xlat4;\n    u_xlat1.x = u_xlat1.x * -2.0 + 1.57079637;\n    u_xlatb3 = abs(u_xlat0.y)<abs(u_xlat0.x);\n    u_xlat1.x = u_xlatb3 ? u_xlat1.x : float(0.0);\n    u_xlat4 = u_xlat4 * u_xlat6 + u_xlat1.x;\n    u_xlatb6 = u_xlat0.y<(-u_xlat0.y);\n    u_xlat6 = u_xlatb6 ? -3.14159274 : float(0.0);\n    u_xlat4 = u_xlat6 + u_xlat4;\n    u_xlat6 = min(u_xlat0.y, u_xlat0.x);\n    u_xlatb6 = u_xlat6<(-u_xlat6);\n    u_xlat1.x = max(u_xlat0.y, u_xlat0.x);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlatb2 = u_xlat1.x>=(-u_xlat1.x);\n    u_xlatb2 = u_xlatb2 && u_xlatb6;\n    u_xlat0.y = (u_xlatb2) ? (-u_xlat4) : u_xlat4;\n    u_xlat1.xy = u_xlat0.yx * _MainTexScaleScrollSpeed.xy;\n    u_xlat2.xy = _Time.yy * _MainTexScaleScrollSpeed.zw;\n    u_xlat0.x = u_xlat0.x + (-_RadialMask_Value);\n    u_xlat2.xy = u_xlat1.xy * vec2(0.159155071, 2.0) + u_xlat2.xy;\n    u_xlat10_2 = texture2D(_MainTex, u_xlat2.xy).x;\n    u_xlat2.x = log2(u_xlat10_2);\n    u_xlat2.x = u_xlat2.x * _OpacityPower;\n    u_xlat2.x = exp2(u_xlat2.x);\n    u_xlat2.x = u_xlat2.x * _OpacityIntensity;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = float(1.0) / _RadialMask_Blur;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat4 = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat4;\n    u_xlat0.w = u_xlat0.x * u_xlat2.x;\n    u_xlat0.xyz = vs_COLOR0.xyz;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nin highp vec4 in_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec4 _Center;\nuniform \tvec4 _MainTexScaleScrollSpeed;\nuniform \tfloat _OpacityPower;\nuniform \tfloat _OpacityIntensity;\nuniform \tfloat _RadialMask_Value;\nuniform \tfloat _RadialMask_Blur;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_COLOR0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec2 u_xlat1;\nvec2 u_xlat2;\nmediump float u_xlat16_2;\nbool u_xlatb2;\nbool u_xlatb3;\nfloat u_xlat4;\nfloat u_xlat6;\nbool u_xlatb6;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.yx + (-_Center.yx);\n    u_xlat4 = max(abs(u_xlat0.y), abs(u_xlat0.x));\n    u_xlat4 = float(1.0) / u_xlat4;\n    u_xlat6 = min(abs(u_xlat0.y), abs(u_xlat0.x));\n    u_xlat4 = u_xlat4 * u_xlat6;\n    u_xlat6 = u_xlat4 * u_xlat4;\n    u_xlat1.x = u_xlat6 * 0.0208350997 + -0.0851330012;\n    u_xlat1.x = u_xlat6 * u_xlat1.x + 0.180141002;\n    u_xlat1.x = u_xlat6 * u_xlat1.x + -0.330299497;\n    u_xlat6 = u_xlat6 * u_xlat1.x + 0.999866009;\n    u_xlat1.x = u_xlat6 * u_xlat4;\n    u_xlat1.x = u_xlat1.x * -2.0 + 1.57079637;\n    u_xlatb3 = abs(u_xlat0.y)<abs(u_xlat0.x);\n    u_xlat1.x = u_xlatb3 ? u_xlat1.x : float(0.0);\n    u_xlat4 = u_xlat4 * u_xlat6 + u_xlat1.x;\n    u_xlatb6 = u_xlat0.y<(-u_xlat0.y);\n    u_xlat6 = u_xlatb6 ? -3.14159274 : float(0.0);\n    u_xlat4 = u_xlat6 + u_xlat4;\n    u_xlat6 = min(u_xlat0.y, u_xlat0.x);\n    u_xlatb6 = u_xlat6<(-u_xlat6);\n    u_xlat1.x = max(u_xlat0.y, u_xlat0.x);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlatb2 = u_xlat1.x>=(-u_xlat1.x);\n    u_xlatb2 = u_xlatb2 && u_xlatb6;\n    u_xlat0.y = (u_xlatb2) ? (-u_xlat4) : u_xlat4;\n    u_xlat1.xy = u_xlat0.yx * _MainTexScaleScrollSpeed.xy;\n    u_xlat2.xy = _Time.yy * _MainTexScaleScrollSpeed.zw;\n    u_xlat0.x = u_xlat0.x + (-_RadialMask_Value);\n    u_xlat2.xy = u_xlat1.xy * vec2(0.159155071, 2.0) + u_xlat2.xy;\n    u_xlat16_2 = texture(_MainTex, u_xlat2.xy).x;\n    u_xlat2.x = log2(u_xlat16_2);\n    u_xlat2.x = u_xlat2.x * _OpacityPower;\n    u_xlat2.x = exp2(u_xlat2.x);\n    u_xlat2.x = u_xlat2.x * _OpacityIntensity;\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat4 = float(1.0) / _RadialMask_Blur;\n    u_xlat0.x = u_xlat4 * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat4 = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat4;\n    u_xlat0.w = u_xlat0.x * u_xlat2.x;\n    u_xlat0.xyz = vs_COLOR0.xyz;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _ClipRect;\nuniform \tmediump float _MaskSoftnessX;\nuniform \tmediump float _MaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec4 in_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat16_0 = min(u_xlat16_0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat1.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat16_0.xy);\n    vs_TEXCOORD1.xy = (-u_xlat16_0.zw) + u_xlat1.xy;\n    u_xlat16_2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) + vec2(1.0, 1.0);\n    u_xlat1.xy = u_xlat16_2.xy * vec2(0.25, 0.25);\n    vs_TEXCOORD1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec4 _Center;\nuniform \tvec4 _MainTexScaleScrollSpeed;\nuniform \tfloat _OpacityPower;\nuniform \tfloat _OpacityIntensity;\nuniform \tfloat _RadialMask_Value;\nuniform \tfloat _RadialMask_Blur;\nuniform \tmediump vec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec2 u_xlat1;\nmediump vec2 u_xlat16_2;\nvec2 u_xlat3;\nlowp float u_xlat10_3;\nbool u_xlatb3;\nbool u_xlatb4;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.yx + (-_Center.yx);\n    u_xlat6 = max(abs(u_xlat0.y), abs(u_xlat0.x));\n    u_xlat6 = float(1.0) / u_xlat6;\n    u_xlat9 = min(abs(u_xlat0.y), abs(u_xlat0.x));\n    u_xlat6 = u_xlat6 * u_xlat9;\n    u_xlat9 = u_xlat6 * u_xlat6;\n    u_xlat1.x = u_xlat9 * 0.0208350997 + -0.0851330012;\n    u_xlat1.x = u_xlat9 * u_xlat1.x + 0.180141002;\n    u_xlat1.x = u_xlat9 * u_xlat1.x + -0.330299497;\n    u_xlat9 = u_xlat9 * u_xlat1.x + 0.999866009;\n    u_xlat1.x = u_xlat9 * u_xlat6;\n    u_xlat1.x = u_xlat1.x * -2.0 + 1.57079637;\n    u_xlatb4 = abs(u_xlat0.y)<abs(u_xlat0.x);\n    u_xlat1.x = u_xlatb4 ? u_xlat1.x : float(0.0);\n    u_xlat6 = u_xlat6 * u_xlat9 + u_xlat1.x;\n    u_xlatb9 = u_xlat0.y<(-u_xlat0.y);\n    u_xlat9 = u_xlatb9 ? -3.14159274 : float(0.0);\n    u_xlat6 = u_xlat9 + u_xlat6;\n    u_xlat9 = min(u_xlat0.y, u_xlat0.x);\n    u_xlatb9 = u_xlat9<(-u_xlat9);\n    u_xlat1.x = max(u_xlat0.y, u_xlat0.x);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlatb3 = u_xlat1.x>=(-u_xlat1.x);\n    u_xlatb3 = u_xlatb3 && u_xlatb9;\n    u_xlat0.y = (u_xlatb3) ? (-u_xlat6) : u_xlat6;\n    u_xlat1.xy = u_xlat0.yx * _MainTexScaleScrollSpeed.xy;\n    u_xlat3.xy = _Time.yy * _MainTexScaleScrollSpeed.zw;\n    u_xlat0.x = u_xlat0.x + (-_RadialMask_Value);\n    u_xlat3.xy = u_xlat1.xy * vec2(0.159155071, 2.0) + u_xlat3.xy;\n    u_xlat10_3 = texture2D(_MainTex, u_xlat3.xy).x;\n    u_xlat3.x = log2(u_xlat10_3);\n    u_xlat3.x = u_xlat3.x * _OpacityPower;\n    u_xlat3.x = exp2(u_xlat3.x);\n    u_xlat3.x = u_xlat3.x * _OpacityIntensity;\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat6 = float(1.0) / _RadialMask_Blur;\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat6;\n    u_xlat0.w = u_xlat0.x * u_xlat3.x;\n    u_xlat16_2.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat16_2.xy + -abs(vs_TEXCOORD1.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD1.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.x;\n    u_xlat0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat0 * u_xlat16_2.xxxx;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _ClipRect;\nuniform \tmediump float _MaskSoftnessX;\nuniform \tmediump float _MaskSoftnessY;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nin highp vec4 in_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec2 u_xlat16_2;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    u_xlat16_0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat16_0 = min(u_xlat16_0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat1.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat16_0.xy);\n    vs_TEXCOORD1.xy = (-u_xlat16_0.zw) + u_xlat1.xy;\n    u_xlat16_2.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) + vec2(1.0, 1.0);\n    u_xlat1.xy = u_xlat16_2.xy * vec2(0.25, 0.25);\n    vs_TEXCOORD1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec4 _Center;\nuniform \tvec4 _MainTexScaleScrollSpeed;\nuniform \tfloat _OpacityPower;\nuniform \tfloat _OpacityIntensity;\nuniform \tfloat _RadialMask_Value;\nuniform \tfloat _RadialMask_Blur;\nuniform \tmediump vec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec2 u_xlat1;\nmediump vec2 u_xlat16_2;\nvec2 u_xlat3;\nmediump float u_xlat16_3;\nbool u_xlatb3;\nbool u_xlatb4;\nfloat u_xlat6;\nfloat u_xlat9;\nbool u_xlatb9;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.yx + (-_Center.yx);\n    u_xlat6 = max(abs(u_xlat0.y), abs(u_xlat0.x));\n    u_xlat6 = float(1.0) / u_xlat6;\n    u_xlat9 = min(abs(u_xlat0.y), abs(u_xlat0.x));\n    u_xlat6 = u_xlat6 * u_xlat9;\n    u_xlat9 = u_xlat6 * u_xlat6;\n    u_xlat1.x = u_xlat9 * 0.0208350997 + -0.0851330012;\n    u_xlat1.x = u_xlat9 * u_xlat1.x + 0.180141002;\n    u_xlat1.x = u_xlat9 * u_xlat1.x + -0.330299497;\n    u_xlat9 = u_xlat9 * u_xlat1.x + 0.999866009;\n    u_xlat1.x = u_xlat9 * u_xlat6;\n    u_xlat1.x = u_xlat1.x * -2.0 + 1.57079637;\n    u_xlatb4 = abs(u_xlat0.y)<abs(u_xlat0.x);\n    u_xlat1.x = u_xlatb4 ? u_xlat1.x : float(0.0);\n    u_xlat6 = u_xlat6 * u_xlat9 + u_xlat1.x;\n    u_xlatb9 = u_xlat0.y<(-u_xlat0.y);\n    u_xlat9 = u_xlatb9 ? -3.14159274 : float(0.0);\n    u_xlat6 = u_xlat9 + u_xlat6;\n    u_xlat9 = min(u_xlat0.y, u_xlat0.x);\n    u_xlatb9 = u_xlat9<(-u_xlat9);\n    u_xlat1.x = max(u_xlat0.y, u_xlat0.x);\n    u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlatb3 = u_xlat1.x>=(-u_xlat1.x);\n    u_xlatb3 = u_xlatb3 && u_xlatb9;\n    u_xlat0.y = (u_xlatb3) ? (-u_xlat6) : u_xlat6;\n    u_xlat1.xy = u_xlat0.yx * _MainTexScaleScrollSpeed.xy;\n    u_xlat3.xy = _Time.yy * _MainTexScaleScrollSpeed.zw;\n    u_xlat0.x = u_xlat0.x + (-_RadialMask_Value);\n    u_xlat3.xy = u_xlat1.xy * vec2(0.159155071, 2.0) + u_xlat3.xy;\n    u_xlat16_3 = texture(_MainTex, u_xlat3.xy).x;\n    u_xlat3.x = log2(u_xlat16_3);\n    u_xlat3.x = u_xlat3.x * _OpacityPower;\n    u_xlat3.x = exp2(u_xlat3.x);\n    u_xlat3.x = u_xlat3.x * _OpacityIntensity;\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat6 = float(1.0) / _RadialMask_Blur;\n    u_xlat0.x = u_xlat6 * u_xlat0.x;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = u_xlat0.x * -2.0 + 3.0;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat6;\n    u_xlat0.w = u_xlat0.x * u_xlat3.x;\n    u_xlat16_2.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat16_2.xy + -abs(vs_TEXCOORD1.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD1.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.x;\n    u_xlat0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat0 * u_xlat16_2.xxxx;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n"]