["\n#version 100\n\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec4 in_TEXCOORD0;\nattribute highp vec3 in_NORMAL0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD3.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _Useonlycolor;\nuniform \tvec4 _SpeedMainTexUVNoiseZW;\nuniform \tvec4 _Mask_ST;\nuniform \tvec4 _Flow_ST;\nuniform \tfloat _Distortionpower;\nuniform \tvec4 _Noise_ST;\nuniform \tfloat _Fresnelscale;\nuniform \tfloat _Fresnelpower;\nuniform \tvec4 _Color;\nuniform \tfloat _Emission;\nuniform \tfloat _Addnoise;\nuniform \tfloat _Texturesopacity;\nuniform lowp sampler2D _Mask;\nuniform lowp sampler2D _Flow;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _Noise;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat u_xlat3;\nvec2 u_xlat4;\nlowp vec2 u_xlat10_4;\nbool u_xlatb5;\nfloat u_xlat6;\nbool u_xlatb6;\nfloat u_xlat7;\nfloat trunc(float x) { return sign(x)*floor(abs(x)); }\nvec2 trunc(vec2 x) { return sign(x)*floor(abs(x)); }\nvec3 trunc(vec3 x) { return sign(x)*floor(abs(x)); }\nvec4 trunc(vec4 x) { return sign(x)*floor(abs(x)); }\n\nconst int BITWISE_BIT_COUNT = 32;\nint op_modi(int x, int y) { return x - y * (x / y); }\nivec2 op_modi(ivec2 a, ivec2 b) { a.x = op_modi(a.x, b.x); a.y = op_modi(a.y, b.y); return a; }\nivec3 op_modi(ivec3 a, ivec3 b) { a.x = op_modi(a.x, b.x); a.y = op_modi(a.y, b.y); a.z = op_modi(a.z, b.z); return a; }\nivec4 op_modi(ivec4 a, ivec4 b) { a.x = op_modi(a.x, b.x); a.y = op_modi(a.y, b.y); a.z = op_modi(a.z, b.z); a.w = op_modi(a.w, b.w); return a; }\n\nint op_and(int a, int b) { int result = 0; int n = 1; for (int i = 0; i < BITWISE_BIT_COUNT; i++) { if ((op_modi(a, 2) != 0) && (op_modi(b, 2) != 0)) { result += n; } a = a / 2; b = b / 2; n = n * 2; if (!(a > 0 && b > 0)) { break; } } return result; }\nivec2 op_and(ivec2 a, ivec2 b) { a.x = op_and(a.x, b.x); a.y = op_and(a.y, b.y); return a; }\nivec3 op_and(ivec3 a, ivec3 b) { a.x = op_and(a.x, b.x); a.y = op_and(a.y, b.y); a.z = op_and(a.z, b.z); return a; }\nivec4 op_and(ivec4 a, ivec4 b) { a.x = op_and(a.x, b.x); a.y = op_and(a.y, b.y); a.z = op_and(a.z, b.z); a.w = op_and(a.w, b.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy * _Flow_ST.xy + _Flow_ST.zw;\n    u_xlat0.xy = _SpeedMainTexUVNoiseZW.zw * _Time.yy + u_xlat0.xy;\n    u_xlat10_0.xy = texture2D(_Flow, u_xlat0.xy).xy;\n    u_xlat4.xy = vs_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;\n    u_xlat10_4.xy = texture2D(_Mask, u_xlat4.xy).xy;\n    u_xlat0.xy = u_xlat10_0.xy * u_xlat10_4.xy;\n    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat4.xy = _SpeedMainTexUVNoiseZW.xy * _Time.yy + u_xlat4.xy;\n    u_xlat0.xy = (-u_xlat0.xy) * vec2(_Distortionpower) + u_xlat4.xy;\n    u_xlat10_0 = texture2D(_MainTex, u_xlat0.xy);\n    u_xlat1.x = vs_TEXCOORD0.z * 127.0 + 1.0;\n    u_xlat1.x = trunc(u_xlat1.x);\n    u_xlat1.x = 256.0 / u_xlat1.x;\n    u_xlat6 = u_xlat10_0.w * u_xlat1.x;\n    u_xlat6 = floor(u_xlat6);\n    u_xlat10_0.w = u_xlat6 / u_xlat1.x;\n    u_xlat1.xy = vs_TEXCOORD0.xy * _Noise_ST.xy + _Noise_ST.zw;\n    u_xlat10_1 = texture2D(_Noise, u_xlat1.xy);\n    u_xlat0 = u_xlat10_0 * u_xlat10_1;\n    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);\n    u_xlat1.x = (-u_xlat1.x) + 1.0;\n    u_xlat1.x = log2(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _Fresnelpower;\n    u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _Fresnelscale;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat3 = float(op_and(int((gl_FrontFacing ? 1 : 0)), 1065353216));\n    u_xlat1.x = u_xlat1.x * u_xlat3;\n    u_xlat3 = u_xlat0.w * _Texturesopacity + u_xlat1.x;\n    u_xlat6 = u_xlat0.w * _Texturesopacity;\n    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_Addnoise);\n    u_xlat0.w = (u_xlatb5) ? u_xlat3 : u_xlat6;\n    u_xlat3 = (u_xlatb5) ? 1.0 : u_xlat1.x;\n    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xxx);\n    u_xlat0 = u_xlat0 * _Color;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.w = u_xlat3 * u_xlat0.w;\n    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_Useonlycolor);\n    u_xlat0.xyz = (bool(u_xlatb6)) ? _Color.xyz : u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * vec3(_Emission);\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ProjectionParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec4 in_TEXCOORD0;\nin highp vec3 in_NORMAL0;\nout mediump vec4 vs_COLOR0;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec4 vs_TEXCOORD5;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0 = in_TEXCOORD0;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD3.xyz = u_xlat1.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD3.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    vs_TEXCOORD4.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;\n    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);\n    vs_TEXCOORD5.zw = u_xlat0.zw;\n    vs_TEXCOORD5.xy = u_xlat1.zz + u_xlat1.xw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _Useonlycolor;\nuniform \tvec4 _SpeedMainTexUVNoiseZW;\nuniform \tvec4 _Mask_ST;\nuniform \tvec4 _Flow_ST;\nuniform \tfloat _Distortionpower;\nuniform \tvec4 _Noise_ST;\nuniform \tfloat _Fresnelscale;\nuniform \tfloat _Fresnelpower;\nuniform \tvec4 _Color;\nuniform \tfloat _Emission;\nuniform \tfloat _Addnoise;\nuniform \tfloat _Texturesopacity;\nUNITY_LOCATION(0) uniform mediump sampler2D _Mask;\nUNITY_LOCATION(1) uniform mediump sampler2D _Flow;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(3) uniform mediump sampler2D _Noise;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nfloat u_xlat3;\nvec2 u_xlat4;\nmediump vec2 u_xlat16_4;\nbool u_xlatb5;\nfloat u_xlat6;\nbool u_xlatb6;\nfloat u_xlat7;\nvoid main()\n{\n    u_xlat0.xy = vs_TEXCOORD0.xy * _Flow_ST.xy + _Flow_ST.zw;\n    u_xlat0.xy = _SpeedMainTexUVNoiseZW.zw * _Time.yy + u_xlat0.xy;\n    u_xlat16_0.xy = texture(_Flow, u_xlat0.xy).xy;\n    u_xlat4.xy = vs_TEXCOORD0.xy * _Mask_ST.xy + _Mask_ST.zw;\n    u_xlat16_4.xy = texture(_Mask, u_xlat4.xy).xy;\n    u_xlat0.xy = u_xlat16_0.xy * u_xlat16_4.xy;\n    u_xlat4.xy = vs_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat4.xy = _SpeedMainTexUVNoiseZW.xy * _Time.yy + u_xlat4.xy;\n    u_xlat0.xy = (-u_xlat0.xy) * vec2(_Distortionpower) + u_xlat4.xy;\n    u_xlat16_0 = texture(_MainTex, u_xlat0.xy);\n    u_xlat1.x = vs_TEXCOORD0.z * 127.0 + 1.0;\n    u_xlat1.x = trunc(u_xlat1.x);\n    u_xlat1.x = 256.0 / u_xlat1.x;\n    u_xlat6 = u_xlat16_0.w * u_xlat1.x;\n    u_xlat6 = floor(u_xlat6);\n    u_xlat16_0.w = u_xlat6 / u_xlat1.x;\n    u_xlat1.xy = vs_TEXCOORD0.xy * _Noise_ST.xy + _Noise_ST.zw;\n    u_xlat16_1 = texture(_Noise, u_xlat1.xy);\n    u_xlat0 = u_xlat16_0 * u_xlat16_1;\n    u_xlat1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat7 = inversesqrt(u_xlat7);\n    u_xlat1.xyz = vec3(u_xlat7) * u_xlat1.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);\n    u_xlat1.x = (-u_xlat1.x) + 1.0;\n    u_xlat1.x = log2(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _Fresnelpower;\n    u_xlat1.x = exp2(u_xlat1.x);\n    u_xlat1.x = u_xlat1.x * _Fresnelscale;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat3 = uintBitsToFloat(uint((gl_FrontFacing ? 0xffffffffu : uint(0)) & 1065353216u));\n    u_xlat1.x = u_xlat1.x * u_xlat3;\n    u_xlat3 = u_xlat0.w * _Texturesopacity + u_xlat1.x;\n    u_xlat6 = u_xlat0.w * _Texturesopacity;\n    u_xlatb5 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_Addnoise);\n    u_xlat0.w = (u_xlatb5) ? u_xlat3 : u_xlat6;\n    u_xlat3 = (u_xlatb5) ? 1.0 : u_xlat1.x;\n    u_xlat0.xyz = max(u_xlat0.xyz, u_xlat1.xxx);\n    u_xlat0 = u_xlat0 * _Color;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    u_xlat1.w = u_xlat3 * u_xlat0.w;\n    u_xlatb6 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_Useonlycolor);\n    u_xlat0.xyz = (bool(u_xlatb6)) ? _Color.xyz : u_xlat0.xyz;\n    u_xlat1.xyz = u_xlat0.xyz * vec3(_Emission);\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n"]